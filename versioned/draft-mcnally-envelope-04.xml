<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 2.6.10) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-mcnally-envelope-04" category="exp" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.18.0 -->
  <front>
    <title abbrev="Envelope">The Gordian Envelope Structured Data Format</title>
    <seriesInfo name="Internet-Draft" value="draft-mcnally-envelope-04"/>
    <author initials="W." surname="McNally" fullname="Wolf McNally">
      <organization>Blockchain Commons</organization>
      <address>
        <email>wolf@wolfmcnally.com</email>
      </address>
    </author>
    <author initials="C." surname="Allen" fullname="Christopher Allen">
      <organization>Blockchain Commons</organization>
      <address>
        <email>christophera@lifewithalacrity.com</email>
      </address>
    </author>
    <date year="2023" month="August" day="19"/>
    <area>Applications and Real-Time</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <?line 60?>

<t>Gordian Envelope specifies a structured format for hierarchical binary data focused on the ability to transmit it in a privacy-focused way, offering support for privacy as described in RFC 6973 and human rights as described in RFC 8280. Envelopes are designed to facilitate "smart documents" and have a number of unique features including: easy representation of a variety of semantic structures, a built-in Merkle-like digest tree, deterministic representation using CBOR, and the ability for the holder of a document to selectively elide specific parts of a document without invalidating the digest tree structure. This document specifies the base Envelope format, which is designed to be extensible.</t>
    </abstract>
    <note removeInRFC="true">
      <name>Discussion Venues</name>
      <t>Source for this draft and an issue tracker can be found at
    <eref target="https://github.com/BlockchainCommons/envelope-internet-draft"/>.</t>
    </note>
  </front>
  <middle>
    <?line 64?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>Gordian Envelope was designed with two key goals in mind: to be <em>Structure-Ready</em>, allowing for the reliable and interoperable encoding and storage of information; and to be <em>Privacy-Ready</em>, ensuring that transmission of that data can occur in a privacy-protecting manner.</t>
      <ul spacing="normal">
        <li>
          <strong>Structure-Ready.</strong> Gordian Envelope is designed as a "smart document": a set of information about a subject. More than that, it's a meta-document that can contain or refer to other documents. It can support multiple data structures, from single data items, to simple hierarchies, to labeled property graphs, semantic triples, and other forms of structured graphs. Though its fundamental structure is a tree, it can be used to create Directed Acyclic Graphs (DAGs) through references within or between Envelopes.</li>
        <li>
          <strong>Privacy-Ready.</strong> Gordian Envelope protects privacy by affording progressive trust, allowing for holders (not just issuers) to minimally disclose information by using elision, and then to optionally increase that disclosure over time. Progressive trust in Gordian Envelopes is accomplished through the hashing of all elements, which also creates foundational support for signing and encryption. This directly addresses the data minimization suggested by "Privacy Considerations for Internet Protocols" <xref target="RFC6973"/> and also addresses topics such as Privacy, Accessibility, Censorship Resistance, Reliability, and Integrity, which are listed as guidelines in "Research into Human Rights Protocol Considerations" <xref target="RFC8280"/>.</li>
      </ul>
      <t>The following architectural decisions support these goals:</t>
      <ul spacing="normal">
        <li>
          <strong>Structured Merkle Tree.</strong> A variant of the Merkle Tree <xref target="MERKLE"/> structure is created by hashing the elements in the Envelope into a tree of digests. (In this "structured Merkle Tree", all nodes contain both semantic content and digests, rather than semantic content being limited to leaves.)</li>
        <li>
          <strong>Deterministic Representation.</strong> There is only one way to encode any semantic representation within a Gordian Envelope. This is accomplished through the use of Deterministic CBOR <xref target="DCBOR"/> and the sorting of the Envelope's assertions into a lexicographic order (not to be confused with sorting a CBOR encoding's map keys). Any Envelope that doesn't follow these strict rules will be rejected; as a result, separate actors assembling envelopes from the same information will converge on the same encoded structure.</li>
      </ul>
      <section anchor="elision-support">
        <name>Elision Support</name>
        <ul spacing="normal">
          <li>
            <strong>Holder-initiated Elision.</strong> Elision can be performed by the Holder of a Gordian Envelope, not just the Issuer.</li>
          <li>
            <strong>Granular Elision.</strong> Elision can be performed on any data within an Envelope including subjects, predicates and objects of assertions, assertions as a whole, and envelopes as a whole. This allows each entity to elide data as is appropriate for the management of their personal or business risk.</li>
          <li>
            <strong>Progressive Trust.</strong> The elision mechanics in Gordian Envelopes allow for progressive trust, where increasing amounts of data may be revealed over time.</li>
          <li>
            <strong>Consistent Hashing.</strong> Even when elided, digests for those parts of the Gordian Envelope remain the same. So constructs such as signatures remain verifiable even for elided documents.</li>
          <li>
            <strong>Reversible Elision.</strong> Elision can be reversed by the Holder of a Gordian Envelope, which means removed information can be selectively replaced without changing the digest tree.</li>
        </ul>
      </section>
      <section anchor="extensions">
        <name>Extensions</name>
        <t>This document is the base specification for Gordian Envelope, which is stable and useful by itself. However it is also designed to support optional extensions, to be specified in separate documents.</t>
        <t>A few such extensions may require adding new Envelope cases: these will extend the Envelope format itself, and will therefore need to be supported by Envelope encoders. Examples include symmetric encryption and compression which (like elision) allow for the transformation of Envelope elements without changing the digest tree.</t>
        <t>However, most extensions will be specified by defining the semantics of new subjects, predicates, and objects. Such extensions do not require extending the Envelope format but may be supported by tools. Examples include signatures, public-key encryption, digest decorrelation, intra- and inter-Envelope references using digests, expression evaluation and distributed function calls, diffing and merging envelopes, and inclusion proofs.</t>
        <t>Building on this base specification, we expect a robust ecosystem of extensions to emerge, facilitating a wide variety of applications.</t>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

<t>This specification makes use of the following terminology:</t>
      <dl>
        <dt>byte</dt>
        <dd>
          <t>Used in its now-customary sense as a synonym for "octet".</t>
        </dd>
        <dt>element</dt>
        <dd>
          <t>Synonymous with "sub-Envelope". An envelope is a tree of elements, each of which is itself an envelope.</t>
        </dd>
        <dt>image</dt>
        <dd>
          <t>The source data from which a cryptographic digest is calculated.</t>
        </dd>
      </dl>
    </section>
    <section anchor="envelope-format-specification">
      <name>Envelope Format Specification</name>
      <t>This section is normative and specifies the Gordian Envelope binary format in terms of its CBOR components and their sequencing. The formal language used is the Concise Data Definition Language (CDDL) <xref target="RFC8610"/>. To be considered a well-formed Envelope, a sequence of bytes <bcp14>MUST</bcp14> conform to the Gordian dCBOR deterministic CBOR profile <xref target="DCBOR"/> and <bcp14>MUST</bcp14> conform to the specifications in this section.</t>
      <t>An Envelope is a tagged enumerated type with five cases. Here is the entire CDDL specification for the base Envelope format. Each case is discussed in detail below:</t>
      <sourcecode type="cddl"><![CDATA[
envelope = #6.200(envelope-content)
envelope-content = (
    leaf /
    elided /
    node /
    assertion /
    wrapped
)

leaf = #6.24(bytes .dcbor any)

elided = sha256-digest
sha256-digest = bytes .size 32

node = [subject, + assertion-element]
subject = envelope-content
assertion-element = ( assertion / elided-assertion )
elided-assertion = elided           ; MUST represent an assertion.

assertion = { predicate: object }
predicate = envelope-content
object = envelope-content

wrapped = envelope
]]></sourcecode>
      <t>Some of these cases create a hierarchical, recursive structure by including children that are themselves Envelopes. Two of these cases (<tt>leaf</tt> and <tt>elided</tt>) have no children. The <tt>node</tt> case adds one or more assertions to the envelope, each of which is a child. The <tt>assertion</tt> case is a predicate/object pair, both of which are children. The <tt>wrapped</tt> case is used to wrap an entire Envelope including its assertions (its child), so that assertions can be made about the wrapped Envelope as a whole.</t>
      <section anchor="leaf-case-format">
        <name>Leaf Case Format</name>
        <t>A <tt>leaf</tt> case is used when the Envelope contains only user-defined CBOR content. It is tagged using <tt>#6.24</tt>, per <xref target="RFC8949"/> Â§3.4.5.1, "Encoded CBOR Data Item". See Â§4 of <xref target="CCDE"/> for CDDL support for dCBOR.</t>
        <sourcecode type="cddl"><![CDATA[
leaf = #6.24(bytes .dcbor any)
]]></sourcecode>
        <t>The <tt>leaf</tt> case can be discriminated from other Envelope case arms by the fact that it is the only one that is tagged using <tt>#6.24</tt>.</t>
        <t>To preserve deterministic encoding, authors of application-level data formats based on Envelope <bcp14>MUST</bcp14> only encode CBOR that conforms to dCBOR <xref target="DCBOR"/> in the <tt>leaf</tt> case. Care must be taken to ensure that leaf dCBOR follows best practices for deterministic encoding, such as clearly specifying when tags for nested structures <bcp14>MUST</bcp14> or <bcp14>MUST NOT</bcp14> be used.</t>
      </section>
      <section anchor="elided-case-format">
        <name>Elided Case Format</name>
        <t>An <tt>elided</tt> case is used as a placeholder for an element that has been elided. It consists solely of the elided envelope's digest.</t>
        <sourcecode type="cddl"><![CDATA[
elided = sha256-digest
sha256-digest = bytes .size 32
]]></sourcecode>
        <t>The <tt>elided</tt> case can be discriminated from other Envelope case arms by the fact that it is the only one that is a CBOR byte string and always has a length of 32 bytes.</t>
        <t>If the method of producing the digest ever changes, the top-level Envelope tag <tt>#6.200</tt> <bcp14>MUST</bcp14> be changed to a new value, and the new method <bcp14>MUST</bcp14> be specified in a new document. This is to ensure that the digest tree remains consistent.</t>
      </section>
      <section anchor="node-case-format">
        <name>Node Case Format</name>
        <t>A <tt>node</tt> case is encoded as a CBOR array. A <tt>node</tt> case <bcp14>MUST</bcp14> be used when one or more assertions are present on the Envelope. A <tt>node</tt> case <bcp14>MUST NOT</bcp14> be present when there is not at least one assertion.</t>
        <t>The first element of the array is the Envelope's <tt>subject</tt>, followed by one or more <tt>assertion-element</tt>s, each of which <bcp14>MUST</bcp14> either be an <tt>assertion</tt> or an <tt>elided-assertion</tt>.</t>
        <t>The <tt>assertion-element</tt>s <bcp14>MUST</bcp14> appear in ascending lexicographic order by their digest (not to be confused with sorting a CBOR map's keys).</t>
        <t>The array <bcp14>MUST NOT</bcp14> contain any <tt>assertion-element</tt>s with identical digests.</t>
        <t>For an Envelope to be valid, any <tt>elided-assertion</tt> Envelopes in the <tt>node</tt> assertions <bcp14>MUST</bcp14>, if and when unelided, be found to be actual <tt>assertion</tt> case Envelopes having the same digest.</t>
        <sourcecode type="cddl"><![CDATA[
node = [subject, + assertion-element]
subject = envelope-content
assertion-element = ( assertion / elided-assertion )
elided-assertion = elided           ; MUST represent an assertion.
]]></sourcecode>
        <t>The <tt>node</tt> case can be discriminated from other Envelope case arms by the fact that it is the only one that is a CBOR array.</t>
      </section>
      <section anchor="assertion-case-format">
        <name>Assertion Case Format</name>
        <t>An <tt>assertion</tt> case is used for each of the assertions on the subject of an Envelope. It is encoded as a CBOR map with exactly one map entry:</t>
        <ul spacing="normal">
          <li>The key of the map entry is the Envelope representing the predicate of the assertion.</li>
          <li>The value of the map entry is the Envelope representing the object of the assertion.</li>
        </ul>
        <sourcecode type="cddl"><![CDATA[
assertion = { predicate: object }
predicate = envelope-content
object = envelope-content
]]></sourcecode>
        <t>The <tt>assertion</tt> case can be discriminated from other Envelope case arms by the fact that it is the only one that is a CBOR map.</t>
      </section>
      <section anchor="wrapped-case-format">
        <name>Wrapped Case Format</name>
        <t>Assertions make semantic statements about an Envelope's subject. A <tt>wrapped</tt> case is used where an Envelope, including all its assertions, should be treated as a single element, e.g. for the purpose of adding assertions to an Envelope as a whole, including its assertions.</t>
        <sourcecode type="cddl"><![CDATA[
wrapped = envelope
]]></sourcecode>
        <t>The <tt>wrapped</tt> case can be discriminated from other Envelope case arms by the fact that it is the only one that is top-level CBOR envelope, always tagged with <tt>#6.200</tt>.</t>
      </section>
    </section>
    <section anchor="computing-the-digest-tree">
      <name>Computing the Digest Tree</name>
      <t>This section specifies how the digests for each of the Envelope cases are computed and is normative. The examples in this section may be used as test vectors.</t>
      <t>Each of the five enumerated Envelope cases produces an image which is used as input to a cryptographic hash function to produce the digest of its contents.</t>
      <t>The overall digest of an Envelope is the digest of its specific case.</t>
      <t>In this section:</t>
      <ul spacing="normal">
        <li>
          <tt>digest(image)</tt> is the 32-byte hash produced by running the SHA-256 hash function on the input image.</li>
        <li>The <tt>.digest</tt> attribute is the digest of the named element computed as specified herein.</li>
        <li>The <tt>||</tt> operator represents the concatenation of byte sequences.</li>
      </ul>
      <section anchor="leaf-digest-calculation">
        <name>Leaf Digest Calculation</name>
        <t>The <tt>leaf</tt> case consists of any CBOR object conforming to dCBOR <xref target="DCBOR"/>. The Envelope image is the CBOR serialization of that object:</t>
        <artwork><![CDATA[
digest(cbor)
]]></artwork>
        <t><strong>Example</strong></t>
        <t>The CBOR serialization of the plaintext string <tt>"Hello"</tt> (not including the quotes) is:</t>
        <artwork><![CDATA[
65            # text(5)
   48656C6C6F # "Hello"
]]></artwork>
        <t>The following command line calculates the SHA-256 sum of this sequence:</t>
        <artwork><![CDATA[
$ echo "6548656C6C6F" | xxd -r -p | shasum --binary --algorithm 256 | \
    awk '{ print $1 }'
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b
]]></artwork>
        <t>Using the <tt>envelope</tt> command line tool <xref target="ENVELOPE-CLI"/>, we create an Envelope with this string as the subject and display the Envelope's digest. The digest below matches the one above.</t>
        <artwork><![CDATA[
$ envelope subject "Hello" | envelope digest --hex
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b
]]></artwork>
      </section>
      <section anchor="elided-digest-calculation">
        <name>Elided Digest Calculation</name>
        <t>The <tt>elided</tt> case declares its digest to be the digest of the Envelope for which it is a placeholder.</t>
        <t><strong>Example</strong></t>
        <t>If we create the Envelope from the leaf example above, elide it, and then request its digest:</t>
        <artwork><![CDATA[
$ envelope subject "Hello" | envelope elide | envelope digest --hex
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b
]]></artwork>
        <t>...we see that its digest is the same as its unelided form:</t>
        <artwork><![CDATA[
$ envelope subject "Hello" | envelope digest --hex
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b
]]></artwork>
      </section>
      <section anchor="node-digest-calculation">
        <name>Node Digest Calculation</name>
        <t>The Envelope image of the <tt>node</tt> case is the concatenation of the digest of its <tt>subject</tt> and the digests of its assertions sorted in ascending lexicographic order.</t>
        <t>With a <tt>node</tt> case, there <bcp14>MUST</bcp14> always be at least one assertion.</t>
        <artwork><![CDATA[
digest(subject.digest || assertion-0.digest ||
    assertion-1.digest || ... || assertion-n.digest)
]]></artwork>
        <t><strong>Example</strong></t>
        <t>We create four separate Envelopes and display their digests:</t>
        <artwork><![CDATA[
$ SUBJECT=`envelope subject "Alice"`
$ envelope digest --hex $SUBJECT
13941b487c1ddebce827b6ec3f46d982938acdc7e3b6a140db36062d9519dd2f

$ ASSERTION_0=`envelope subject assertion "knows" "Bob"`
$ envelope digest --hex $ASSERTION_0
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2

$ ASSERTION_1=`envelope subject assertion "knows" "Carol"`
$ envelope digest --hex $ASSERTION_1
4012caf2d96bf3962514bcfdcf8dd70c351735dec72c856ec5cdcf2ee35d6a91

$ ASSERTION_2=`envelope subject assertion "knows" "Edward"`
$ envelope digest --hex $ASSERTION_2
65c3ebc3f056151a6091e738563dab4af8da1778da5a02afcd104560b612ca17
]]></artwork>
        <t>We combine the Envelopes into a single Envelope with three assertions:</t>
        <artwork><![CDATA[
$ ENVELOPE=`envelope assertion add envelope $ASSERTION_0 $SUBJECT | \
    envelope assertion add envelope $ASSERTION_1 | \
    envelope assertion add envelope $ASSERTION_2`

$ envelope $ENVELOPE
"Alice" [
    "knows": "Bob"
    "knows": "Carol"
    "knows": "Edward"
]

$ envelope digest --hex $ENVELOPE
6255e3b67ad935caf07b5dce5105d913dcfb82f0392d4d302f6d406e85ab4769
]]></artwork>
        <t>Note that in the Envelope notation representation above, the assertions are sorted alphabetically, with <tt>"knows": "Edward"</tt> coming last. But internally, the three assertions are ordered by digest in ascending lexicographic order, with "Carol" coming first because its digest starting with <tt>4012caf2</tt> is the lowest, as in the tree formatted display below:</t>
        <artwork><![CDATA[
$ envelope --tree $ENVELOPE
6255e3b6 NODE
    13941b48 subj "Alice"
    4012caf2 ASSERTION
        db7dd21c pred "knows"
        afb8122e obj "Carol"
    65c3ebc3 ASSERTION
        db7dd21c pred "knows"
        e9af7883 obj "Edward"
    78d666eb ASSERTION
        db7dd21c pred "knows"
        13b74194 obj "Bob"
]]></artwork>
        <t>To replicate this, we make a list of digests, starting with the subject, and then sort each assertion's digest in ascending lexicographic order:</t>
        <artwork><![CDATA[
13941b487c1ddebce827b6ec3f46d982938acdc7e3b6a140db36062d9519dd2f
4012caf2d96bf3962514bcfdcf8dd70c351735dec72c856ec5cdcf2ee35d6a91
65c3ebc3f056151a6091e738563dab4af8da1778da5a02afcd104560b612ca17
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2
]]></artwork>
        <t>We then calculate the SHA-256 digest of the concatenation of these four digests. Note that this is the same digest as the composite Envelope's digest:</t>
        <artwork><![CDATA[
echo "13941b487c1ddebce827b6ec3f46d982938acdc7e3b6a140db36062d9519dd2f\
4012caf2d96bf3962514bcfdcf8dd70c351735dec72c856ec5cdcf2ee35d6a91\
65c3ebc3f056151a6091e738563dab4af8da1778da5a02afcd104560b612ca17\
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2" | \
    xxd -r -p | shasum --binary --algorithm 256 | awk '{ print $1 }'
6255e3b67ad935caf07b5dce5105d913dcfb82f0392d4d302f6d406e85ab4769

$ envelope digest --hex $ENVELOPE
6255e3b67ad935caf07b5dce5105d913dcfb82f0392d4d302f6d406e85ab4769
]]></artwork>
      </section>
      <section anchor="assertion-digest-calculation">
        <name>Assertion Digest Calculation</name>
        <t>The Envelope image of the <tt>assertion</tt> case is the concatenation of the digests of the assertion's predicate and object, in that order:</t>
        <artwork><![CDATA[
digest(predicate.digest || object.digest)
]]></artwork>
        <t><strong>Example</strong></t>
        <t>We create an assertion from two separate Envelopes and display their digests:</t>
        <artwork><![CDATA[
$ PREDICATE=`envelope subject "knows"`
$ envelope digest --hex $PREDICATE
db7dd21c5169b4848d2a1bcb0a651c9617cdd90bae29156baaefbb2a8abef5ba

$ OBJECT=`envelope subject "Bob"`
$ envelope digest --hex $OBJECT
13b741949c37b8e09cc3daa3194c58e4fd6b2f14d4b1d0f035a46d6d5a1d3f11

$ ASSERTION=`envelope subject assertion "knows" "Bob"`
$ envelope digest --hex $ASSERTION
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2
]]></artwork>
        <t>To replicate this, we make a list of the predicate digest and the object digest, in that order:</t>
        <artwork><![CDATA[
db7dd21c5169b4848d2a1bcb0a651c9617cdd90bae29156baaefbb2a8abef5ba
13b741949c37b8e09cc3daa3194c58e4fd6b2f14d4b1d0f035a46d6d5a1d3f11
]]></artwork>
        <t>We then calculate the SHA-256 digest of the concatenation of these two digests. Note that this is the same digest as the composite Envelope's digest:</t>
        <artwork><![CDATA[
echo "db7dd21c5169b4848d2a1bcb0a651c9617cdd90bae29156baaefbb2a8abef5ba\
13b741949c37b8e09cc3daa3194c58e4fd6b2f14d4b1d0f035a46d6d5a1d3f11" | \
    xxd -r -p | shasum --binary --algorithm 256 | awk '{ print $1 }'
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2

$ envelope digest --hex $ASSERTION
78d666eb8f4c0977a0425ab6aa21ea16934a6bc97c6f0c3abaefac951c1714a2
]]></artwork>
      </section>
      <section anchor="wrapped-digest-calculation">
        <name>Wrapped Digest Calculation</name>
        <t>The Envelope image of the <tt>wrapped</tt> case is the digest of the wrapped Envelope:</t>
        <artwork><![CDATA[
digest(envelope.digest)
]]></artwork>
        <t><strong>Example</strong></t>
        <t>As above, we note the digest of a leaf Envelope is the digest of its CBOR:</t>
        <artwork><![CDATA[
$ envelope subject "Hello" | envelope digest --hex
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b

$ echo "6548656C6C6F" | xxd -r -p | shasum --binary --algorithm 256 | \
    awk '{ print $1 }'
4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb3d27ac1a55971e6b
]]></artwork>
        <t>Now we note that the digest of a wrapped Envelope is the digest of the wrapped Envelope's digest:</t>
        <artwork><![CDATA[
$ envelope subject "Hello" | \
    envelope subject --wrapped | \
    envelope digest --hex
743a86a9f411b1441215fbbd3ece3de5206810e8a3dd8239182e123802677bd7

$ echo "4d303dac9eed63573f6190e9c4191be619e03a7b3c21e9bb\
3d27ac1a55971e6b" \
    | xxd -r -p | shasum --binary --algorithm 256 | awk '{ print $1 }'
743a86a9f411b1441215fbbd3ece3de5206810e8a3dd8239182e123802677bd7
]]></artwork>
      </section>
    </section>
    <section anchor="envelope-hierarchy">
      <name>Envelope Hierarchy</name>
      <t>This section is informative, and describes Envelopes from the perspective of their hierarchical structure and the various ways they can be formatted.</t>
      <t>Notionally an Envelope can be thought of as a <tt>subject</tt> and one or more <tt>predicate-object</tt> pairs called <tt>assertions</tt>.</t>
      <t>Note that the following example is <em>not</em> CDDL or CBOR diagnostic notation, but "Envelope notation," which is a convenient way to describe the structure of an Envelope:</t>
      <artwork><![CDATA[
subject [
    predicate0: object0
    predicate1: object1
    ...
    predicateN: objectN
]
]]></artwork>
      <t>A concrete example of this might be:</t>
      <artwork><![CDATA[
"Alice" [
    "knows": "Bob"
    "knows": "Carol"
    "knows": "Edward"
]
]]></artwork>
      <t>The notional concept of Envelope is helpful, but not technically accurate because Envelope is implemented structurally as an enumerated type consisting of five cases. This allows actual Envelope instances to be more flexible, for example a "bare assertion" consisting of a predicate-object pair with no subject, which is useful in some situations:</t>
      <artwork><![CDATA[
"knows": "Bob"
]]></artwork>
      <t>More common is the opposite case: a subject with no assertions:</t>
      <artwork><![CDATA[
"Alice"
]]></artwork>
      <t>In Envelopes, there are five distinct "positions" of elements, each of which is itself an Envelope and which therefore produces its own digest:</t>
      <ol spacing="normal" type="1"><li>envelope</li>
        <li>subject</li>
        <li>assertion</li>
        <li>predicate</li>
        <li>object</li>
      </ol>
      <t>The examples above are printed in Envelope notation, which is designed to make the semantic content of Envelopes human-readable, but it doesn't show the actual digests associated with each of the positions. To see the structure more completely, we can display every element of the Envelope in "Tree Format":</t>
      <artwork><![CDATA[
6255e3b6 NODE
    13941b48 subj "Alice"
    4012caf2 ASSERTION
        db7dd21c pred "knows"
        afb8122e obj "Carol"
    65c3ebc3 ASSERTION
        db7dd21c pred "knows"
        e9af7883 obj "Edward"
    78d666eb ASSERTION
        db7dd21c pred "knows"
        13b74194 obj "Bob"
]]></artwork>
      <t>For easy recognition, Envelope trees only show the first four bytes of each digest, but internally all digests are 32 bytes.</t>
      <t>From the above Envelope and its tree, we make the following observations:</t>
      <ul spacing="normal">
        <li>The Envelope is a <tt>node</tt> case, which has the overall Envelope digest.</li>
        <li>The subject "Alice" has its own digest.</li>
        <li>Each of the three assertions have their own digests</li>
        <li>The predicate and object of each assertion each have their own digests.</li>
        <li>The assertions appear in the structure in ascending lexicographic order by digest, which is the actual order in which they are serialized, and which is distinct from Envelope notation, where they appear sorted alphabetically.</li>
      </ul>
      <t>The following subsections present each of the five enumerated Envelope cases in four different output formats:</t>
      <ul spacing="normal">
        <li>Envelope Notation</li>
        <li>Envelope Tree</li>
        <li>CBOR Diagnostic Notation</li>
        <li>CBOR hex</li>
      </ul>
      <t>These examples may be used as test vectors. In addition, each subsection starts with the <tt>envelope</tt> command line <xref target="ENVELOPE-CLI"/> needed to generate the Envelope being formatted.</t>
      <section anchor="leaf-case">
        <name>Leaf Case</name>
        <t><strong>Envelope CLI Command Line</strong></t>
        <artwork><![CDATA[
envelope subject "Alice"
]]></artwork>
        <t><strong>Envelope Notation</strong></t>
        <artwork><![CDATA[
"Alice"
]]></artwork>
        <t><strong>Tree</strong></t>
        <artwork><![CDATA[
13941b48 "Alice"
]]></artwork>
        <t><strong>CBOR Diagnostic Notation</strong></t>
        <artwork><![CDATA[
200(   / envelope /
   24("Alice")   / leaf /
)
]]></artwork>
        <t><strong>CBOR Hex</strong></t>
        <artwork><![CDATA[
D8 C8               # tag(200) envelope
   D8 18            # tag(24) leaf
      65            # text(5)
         416C696365 # "Alice"
]]></artwork>
      </section>
      <section anchor="elided-case">
        <name>Elided Case</name>
        <t><strong>Envelope CLI Command Line</strong></t>
        <artwork><![CDATA[
envelope subject "Alice" | envelope elide
]]></artwork>
        <t><strong>Envelope Notation</strong></t>
        <artwork><![CDATA[
ELIDED
]]></artwork>
        <t><strong>Tree</strong></t>
        <artwork><![CDATA[
13941b48 ELIDED
]]></artwork>
        <t><strong>CBOR Diagnostic Notation</strong></t>
        <artwork><![CDATA[
200(   / envelope /
   h'13941b487c1ddebce827b6ec3f46d982938acdc7e3b6a140db36062d9519dd2f'
)
]]></artwork>
        <t><strong>CBOR Hex</strong></t>
        <artwork><![CDATA[
D8 C8                                   # tag(200) envelope
   58 20                                # bytes(32)
      13941B487C1DDEBCE827B6EC3F46D982938ACDC7E3B6A140DB36062D9519DD2F
]]></artwork>
      </section>
      <section anchor="node-case">
        <name>Node Case</name>
        <t><strong>Envelope CLI Command Line</strong></t>
        <artwork><![CDATA[
envelope subject "Alice" | envelope assertion "knows" "Bob"
]]></artwork>
        <t><strong>Envelope Notation</strong></t>
        <artwork><![CDATA[
"Alice" [
    "knows": "Bob"
]
]]></artwork>
        <t><strong>Tree</strong></t>
        <artwork><![CDATA[
8955db5e NODE
    13941b48 subj "Alice"
    78d666eb ASSERTION
        db7dd21c pred "knows"
        13b74194 obj "Bob"
]]></artwork>
        <t><strong>CBOR Diagnostic Notation</strong></t>
        <artwork><![CDATA[
200(   / envelope /
   [
      24("Alice"),   / leaf /
      {
         24("knows"):   / leaf /
         24("Bob")   / leaf /
      }
   ]
)
]]></artwork>
        <t><strong>CBOR Hex</strong></t>
        <artwork><![CDATA[
D8 C8                     # tag(200) envelope
   82                     # array(2)
      D8 18               # tag(24) leaf
         65               # text(5)
            416C696365    # "Alice"
      A1                  # map(1)
         D8 18            # tag(24) leaf
            65            # text(5)
               6B6E6F7773 # "knows"
         D8 18            # tag(24) leaf
            63            # text(3)
               426F62     # "Bob"
]]></artwork>
      </section>
      <section anchor="assertion-case">
        <name>Assertion Case</name>
        <t><strong>Envelope CLI Command Line</strong></t>
        <artwork><![CDATA[
envelope subject assertion "knows" "Bob"
]]></artwork>
        <t><strong>Envelope Notation</strong></t>
        <artwork><![CDATA[
"knows": "Bob"
]]></artwork>
        <t><strong>Tree</strong></t>
        <artwork><![CDATA[
78d666eb ASSERTION
    db7dd21c pred "knows"
    13b74194 obj "Bob"
]]></artwork>
        <t><strong>CBOR Diagnostic Notation</strong></t>
        <artwork><![CDATA[
200(   / envelope /
   {
      24("knows"):   / leaf /
      24("Bob")   / leaf /
   }
)
]]></artwork>
        <t><strong>CBOR Hex</strong></t>
        <artwork><![CDATA[
D8 C8                  # tag(200) envelope
   A1                  # map(1)
      D8 18            # tag(24) leaf
         65            # text(5)
            6B6E6F7773 # "knows"
      D8 18            # tag(24) leaf
         63            # text(3)
            426F62     # "Bob"
]]></artwork>
      </section>
      <section anchor="wrapped-case">
        <name>Wrapped Case</name>
        <t><strong>Envelope CLI Command Line</strong></t>
        <artwork><![CDATA[
envelope subject "Alice" | envelope subject --wrapped
]]></artwork>
        <t><strong>Envelope Notation</strong></t>
        <artwork><![CDATA[
{
    "Alice"
}
]]></artwork>
        <t><strong>Tree</strong></t>
        <artwork><![CDATA[
2bc17c65 WRAPPED
    13941b48 subj "Alice"
]]></artwork>
        <t><strong>CBOR Diagnostic Notation</strong></t>
        <artwork><![CDATA[
200(   / envelope /
   200(   / envelope /
      24("Alice")   / leaf /
   )
)
]]></artwork>
        <t><strong>CBOR Hex</strong></t>
        <artwork><![CDATA[
D8 C8                  # tag(200) envelope
   D8 C8               # tag(200) envelope
      D8 18            # tag(24) leaf
         65            # text(5)
            416C696365 # "Alice"
]]></artwork>
      </section>
    </section>
    <section anchor="reference-implementations">
      <name>Reference Implementations</name>
      <t>This section is informative.</t>
      <t>The current reference implementations of Envelope are written in Swift <xref target="ENVELOPE-SWIFT"/> and Rust <xref target="ENVELOPE-RUST"/>.</t>
      <t>The <tt>envelope</tt> command line tool <xref target="ENVELOPE-CLI"/> is also written in Swift.</t>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>This section is informative unless noted otherwise.</t>
      <section anchor="cbor-considerations">
        <name>CBOR Considerations</name>
        <t>Generally, this document inherits the security considerations of CBOR <xref target="RFC8949"/>. Though CBOR has limited web usage, it has received strong usage in hardware, resulting in a mature specification. It also inherits the security considerations of Gordian dCBOR <xref target="DCBOR"/>.</t>
      </section>
      <section anchor="validation-requirements">
        <name>Validation Requirements</name>
        <t>Unlike HTML, Envelope is intended to be conservative in both what it encodes <em>and</em> what it accepts as valid. This means that receivers of Envelope-based documents should carefully validate them. Any deviation from the validation requirements of this specification <bcp14>MUST</bcp14> result in the rejection of the entire Envelope. Even after validation, Envelope contents should be treated with due skepticism at the application level.</t>
      </section>
      <section anchor="choice-of-sha-256-hash-primitive">
        <name>Choice of SHA-256 Hash Primitive</name>
        <t>Envelope uses the SHA-256 digest algorithm <xref target="RFC6234"/>, which is regarded as reliable and widely supported by many implementations in both software and hardware.</t>
      </section>
      <section anchor="correlated-digests">
        <name>Correlated Digests</name>
        <t>Elided Envelopes may in some cases inadvertently reveal information by transmitting digests that may be correlated to known information. In many cases this is of no consequence, but when necessary Envelopes can (when constructed) be "salted" by adding assertions that contain random data. This results in perturbing the digest tree, hence decorrelating it (after elision) from digests whose unelided contents are known.</t>
      </section>
      <section anchor="rfc-6973-considerations">
        <name>RFC 6973 Considerations</name>
        <t>"Privacy Considerations for Internet Protocols" <xref target="RFC6973"/> lists threats and guidelines related to privacy in internet protocols. Envelope is intended to help internet protocols easily adopt these considerations. It explicitly addresses the privacy-specific threats of correlation, secondary use, and disclosure by supporting the suggested guideline of Data Minimization.</t>
      </section>
      <section anchor="rfc-8280-considerations">
        <name>RFC 8280 Considerations</name>
        <t>"Research into Human Rights Protocol Considerations" <xref target="RFC8280"/> lists guidelines for human rights considerations in internet protocols. Envelope similarly adopts many of the guidelines there, improving privacy and censorship resistance through its hashed elision; and accessibility, heterogeneity support, reliability, and integrity through its fundamental data structures.</t>
      </section>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <section anchor="cbor-tags">
        <name>CBOR Tags</name>
        <t>This document requests that IANA <xref target="IANA-CBOR-TAGS"/> reserve the following tag:</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Item</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">200</td>
              <td align="left">multiple</td>
              <td align="left">Gordian Envelope</td>
            </tr>
          </tbody>
        </table>
        <t>Points of contact:</t>
        <ul spacing="normal">
          <li>Christopher Allen <eref target="mailto:christophera@blockchaincommons.com">christophera@blockchaincommons.com</eref></li>
          <li>Wolf McNally <eref target="mailto:wolf@wolfmcnally.com">wolf@wolfmcnally.com</eref></li>
        </ul>
      </section>
      <section anchor="media-type">
        <name>Media Type</name>
        <t>The proposed media type <xref target="RFC6838"/> for Envelope is <tt>application/envelope+cbor</tt>. The authors understand that this will require this document to become an RFC before the media type can be registered.</t>
        <ul spacing="normal">
          <li>Type name: application</li>
          <li>Subtype name: envelope+cbor</li>
          <li>Required parameters: n/a</li>
          <li>Optional parameters: n/a</li>
          <li>Encoding considerations: binary</li>
          <li>Security considerations: See the previous section of this document</li>
          <li>Interoperability considerations: n/a</li>
          <li>Published specification: This document</li>
          <li>Applications that use this media type:  None yet, but it is expected that this format will be deployed in protocols and applications.</li>
          <li>
            <t>Additional information:
            </t>
            <ul spacing="normal">
              <li>Magic number(s): n/a</li>
              <li>File extension(s): .envelope</li>
              <li>Macintosh file type code(s): n/a</li>
            </ul>
          </li>
          <li>
            <t>Person &amp; email address to contact for further information:
            </t>
            <ul spacing="normal">
              <li>Christopher Allen <eref target="mailto:christophera@blockchaincommons.com">christophera@blockchaincommons.com</eref></li>
              <li>Wolf McNally <eref target="mailto:wolf@wolfmcnally.com">wolf@wolfmcnally.com</eref></li>
            </ul>
          </li>
          <li>Intended usage: COMMON</li>
          <li>Restrictions on usage: none</li>
          <li>
            <t>Author:
            </t>
            <ul spacing="normal">
              <li>Wolf McNally <eref target="mailto:wolf@wolfmcnally.com">wolf@wolfmcnally.com</eref></li>
            </ul>
          </li>
          <li>
            <t>Change controller:
            </t>
            <ul spacing="normal">
              <li>The IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref></li>
            </ul>
          </li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC6838">
          <front>
            <title>Media Type Specifications and Registration Procedures</title>
            <author fullname="N. Freed" initials="N." surname="Freed"/>
            <author fullname="J. Klensin" initials="J." surname="Klensin"/>
            <author fullname="T. Hansen" initials="T." surname="Hansen"/>
            <date month="January" year="2013"/>
            <abstract>
              <t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols. This memo documents an Internet Best Current Practice.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="13"/>
          <seriesInfo name="RFC" value="6838"/>
          <seriesInfo name="DOI" value="10.17487/RFC6838"/>
        </reference>
        <reference anchor="DCBOR" target="https://datatracker.ietf.org/doc/draft-mcnally-deterministic-cbor/">
          <front>
            <title>Gordian dCBOR: A Deterministic CBOR Application Profile</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA-CBOR-TAGS" target="https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml">
          <front>
            <title>IANA, Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="RFC6234">
          <front>
            <title>US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="T. Hansen" initials="T." surname="Hansen"/>
            <date month="May" year="2011"/>
            <abstract>
              <t>Federal Information Processing Standard, FIPS</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6234"/>
          <seriesInfo name="DOI" value="10.17487/RFC6234"/>
        </reference>
        <reference anchor="ENVELOPE-SWIFT" target="https://github.com/blockchaincommons/BCSwiftEnvelope">
          <front>
            <title>Blockchain Commons Gordian Envelope for Swift</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="ENVELOPE-RUST" target="https://github.com/blockchaincommons/bc-envelope-rust">
          <front>
            <title>Blockchain Commons Gordian Envelope for Rust</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="ENVELOPE-CLI" target="https://github.com/BlockchainCommons/envelope-cli-swift">
          <front>
            <title>Envelope Command Line Tool</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="CCDE" target="https://www.ietf.org/archive/id/draft-bormann-cbor-dcbor-02.html">
          <front>
            <title>Common CBOR Deterministic Encoding and Application Profiles</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="MERKLE" target="https://en.wikipedia.org/wiki/Merkle_tree">
          <front>
            <title>Merkle Tree</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="RFC6973">
          <front>
            <title>Privacy Considerations for Internet Protocols</title>
            <author fullname="A. Cooper" initials="A." surname="Cooper"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="B. Aboba" initials="B." surname="Aboba"/>
            <author fullname="J. Peterson" initials="J." surname="Peterson"/>
            <author fullname="J. Morris" initials="J." surname="Morris"/>
            <author fullname="M. Hansen" initials="M." surname="Hansen"/>
            <author fullname="R. Smith" initials="R." surname="Smith"/>
            <date month="July" year="2013"/>
            <abstract>
              <t>This document offers guidance for developing privacy considerations for inclusion in protocol specifications. It aims to make designers, implementers, and users of Internet protocols aware of privacy-related design choices. It suggests that whether any individual RFC warrants a specific privacy considerations section will depend on the document's content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6973"/>
          <seriesInfo name="DOI" value="10.17487/RFC6973"/>
        </reference>
        <reference anchor="RFC8280">
          <front>
            <title>Research into Human Rights Protocol Considerations</title>
            <author fullname="N. ten Oever" initials="N." surname="ten Oever"/>
            <author fullname="C. Cath" initials="C." surname="Cath"/>
            <date month="October" year="2017"/>
            <abstract>
              <t>This document aims to propose guidelines for human rights considerations, similar to the work done on the guidelines for privacy considerations (RFC 6973). The other parts of this document explain the background of the guidelines and how they were developed.</t>
              <t>This document is the first milestone in a longer-term research effort. It has been reviewed by the Human Rights Protocol Considerations (HRPC) Research Group and also by individuals from outside the research group.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8280"/>
          <seriesInfo name="DOI" value="10.17487/RFC8280"/>
        </reference>
      </references>
    </references>
    <?line 851?>

<section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>The authors are grateful to Carsten Bormann for his review and helpful feedback.</t>
    </section>
  </back>
  <!-- ##markdown-source:
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
lyQ2HPuktOaa83jowpOPT6kvSbudnG08zRoBHRff8SORVzlFYtnrQX5XhtI0
vbehvLeduLcWv7ctNWaAkGrj0EoYWg0g9rmGuXZ57EasUisVptRXrVCY2I0W
xOVRsSda00TiOPe+pPrl3rT65d7E+uXe1GpYa/dlcf6eCP/e1udfZuEqRZgv
jGz2lGg+E97kO+WKB7lTIinX4jfZeGBaylEpOvKwHzixROoGI5+OH9xCmI6w
N+nXBRSvLs5Oz0+Or872hRSsvT/hcdqvPaP3h8ClIIeDSdiTXT/wO3IE7Hk0
6o6DMDzqAMf2jrrDkS+BdX2/JyfgScyGvkR+eXlrbPOZ6OGlCWzYuhwF/bE/
UZ2jIADJk314FAwnajALR35v1h2EA78bdoCvhhK0wygcym7Yn3Wrbvm3DWu+
kSK+k52sFu2MPtVBuE6/8tNbePS+pLw3Hb6V0UGp+P1szn3x9Mu9EfUN9f23
CLr/RULgFE2/UN3vlER385/1tZxVvW13HdyupY9zE0FtKMaqJ1klZ0I/XZLi
88r+nyUL/2eUD16kGwfH1fVhhOiddbl3onhd2D9JgFpuwTRotUyvO00qlBoP
+nIC3uNs0O363cGg2+sOQUeEfRWofqiGvc5o0u2oieyH4aTXP+pOeqrb6086
vdF47IfjklJfitJfvDpSGxrSL6XyPmVy32mxnJeEe6oXx293t+A4B4Vx+Gd2
mTnL4MsqBG7rXvE+33Kvd+UornK9vTGZuDuPdjFRUX+htmZhgc0ItCnPEukD
VdyalG5Z0Ak2zJZYSqkmxytL8azlbqW6Ca6Cp41KuNW7dFnz67ab3ikq5UNT
aAEEPQQBecgLt3EBN+3JieQ8SWkNsMkCNWnzZ2MnO9RsVJbw46EGSURLFvkY
CoNtNqYWd9W6u5YkIx2cPrMT7ZjVPJ3q86553qXn7Xa7+v6Fef/C+5U55pgc
AdxvaBFg6qNLPAUFSKFB+XaZPFu7TTQHEAxqVVR2DAMECxWvZuuYEU2rF0Fy
E06i4Tkca/LdTb7K/ZKOWcIKv7Pymr/KeXdDda+TLrvrEzncTU/uQQl67aCz
J4LPoMl1aZC4cYbJER+X5tCKE1O9Ew1fuutfG7Uxna0cLWcrB+drkrRM17gr
QnCTO+5Gx00y4H3x/l4TqNQoREinU7H4rEW7RmelPTec8LQ8QsuOvJOVNrk3
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
L20SM6VCHLft/TfbKtSL7XkAAA==

-->

</rfc>
